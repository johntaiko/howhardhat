/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type BlockHeaderStruct = {
  parentHash: PromiseOrValue<BytesLike>;
  ommersHash: PromiseOrValue<BytesLike>;
  beneficiary: PromiseOrValue<string>;
  stateRoot: PromiseOrValue<BytesLike>;
  transactionsRoot: PromiseOrValue<BytesLike>;
  receiptsRoot: PromiseOrValue<BytesLike>;
  logsBloom: PromiseOrValue<BytesLike>[];
  difficulty: PromiseOrValue<BigNumberish>;
  height: PromiseOrValue<BigNumberish>;
  gasLimit: PromiseOrValue<BigNumberish>;
  gasUsed: PromiseOrValue<BigNumberish>;
  timestamp: PromiseOrValue<BigNumberish>;
  extraData: PromiseOrValue<BytesLike>;
  mixHash: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  baseFeePerGas: PromiseOrValue<BigNumberish>;
};

export type BlockHeaderStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  parentHash: string;
  ommersHash: string;
  beneficiary: string;
  stateRoot: string;
  transactionsRoot: string;
  receiptsRoot: string;
  logsBloom: string[];
  difficulty: BigNumber;
  height: BigNumber;
  gasLimit: BigNumber;
  gasUsed: BigNumber;
  timestamp: BigNumber;
  extraData: string;
  mixHash: string;
  nonce: BigNumber;
  baseFeePerGas: BigNumber;
};

export interface TestLibBlockHeaderInterface extends utils.Interface {
  functions: {
    "hashBlockHeader((bytes32,bytes32,address,bytes32,bytes32,bytes32,bytes32[8],uint256,uint64,uint64,uint64,uint64,bytes,bytes32,uint64,uint256),address,bytes32)": FunctionFragment;
    "rlpBlockHeader((bytes32,bytes32,address,bytes32,bytes32,bytes32,bytes32[8],uint256,uint64,uint64,uint64,uint64,bytes,bytes32,uint64,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "hashBlockHeader" | "rlpBlockHeader"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hashBlockHeader",
    values: [
      BlockHeaderStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rlpBlockHeader",
    values: [BlockHeaderStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "hashBlockHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rlpBlockHeader",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestLibBlockHeader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestLibBlockHeaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hashBlockHeader(
      header: BlockHeaderStruct,
      prover: PromiseOrValue<string>,
      txListHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    rlpBlockHeader(
      header: BlockHeaderStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  hashBlockHeader(
    header: BlockHeaderStruct,
    prover: PromiseOrValue<string>,
    txListHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  rlpBlockHeader(
    header: BlockHeaderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    hashBlockHeader(
      header: BlockHeaderStruct,
      prover: PromiseOrValue<string>,
      txListHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    rlpBlockHeader(
      header: BlockHeaderStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    hashBlockHeader(
      header: BlockHeaderStruct,
      prover: PromiseOrValue<string>,
      txListHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rlpBlockHeader(
      header: BlockHeaderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hashBlockHeader(
      header: BlockHeaderStruct,
      prover: PromiseOrValue<string>,
      txListHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rlpBlockHeader(
      header: BlockHeaderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
