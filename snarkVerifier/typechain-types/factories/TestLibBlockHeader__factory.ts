/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  TestLibBlockHeader,
  TestLibBlockHeaderInterface,
} from "../TestLibBlockHeader";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "parentHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "ommersHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "beneficiary",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "stateRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "transactionsRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "receiptsRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32[8]",
            name: "logsBloom",
            type: "bytes32[8]",
          },
          {
            internalType: "uint256",
            name: "difficulty",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "height",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "gasLimit",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "gasUsed",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "timestamp",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "mixHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "baseFeePerGas",
            type: "uint256",
          },
        ],
        internalType: "struct BlockHeader",
        name: "header",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "prover",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "txListHash",
        type: "bytes32",
      },
    ],
    name: "hashBlockHeader",
    outputs: [
      {
        internalType: "bytes16",
        name: "",
        type: "bytes16",
      },
      {
        internalType: "bytes16",
        name: "",
        type: "bytes16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "parentHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "ommersHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "beneficiary",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "stateRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "transactionsRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "receiptsRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32[8]",
            name: "logsBloom",
            type: "bytes32[8]",
          },
          {
            internalType: "uint256",
            name: "difficulty",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "height",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "gasLimit",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "gasUsed",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "timestamp",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "mixHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "baseFeePerGas",
            type: "uint256",
          },
        ],
        internalType: "struct BlockHeader",
        name: "header",
        type: "tuple",
      },
    ],
    name: "rlpBlockHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611f6d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633b2234291461003b578063562c57d51461006c575b600080fd5b6100556004803603810190610050919061125d565b61009c565b604051610063929190611307565b60405180910390f35b61008660048036038101906100819190611330565b6100bf565b6040516100939190611412565b60405180910390f35b6000806100b3856100ac90611836565b85856104b0565b91509150935093915050565b60606000600f67ffffffffffffffff8111156100de576100dd611439565b5b60405190808252806020026020018201604052801561011157816020015b60608152602001906001900390816100fc5790505b509050610121836000013561094f565b8160008151811061013557610134611849565b5b602002602001018190525061014d836020013561094f565b8160018151811061016157610160611849565b5b60200260200101819052506101878360400160208101906101829190611878565b61096c565b8160028151811061019b5761019a611849565b5b60200260200101819052506101b3836060013561094f565b816003815181106101c7576101c6611849565b5b60200260200101819052506101df836080013561094f565b816004815181106101f3576101f2611849565b5b602002602001018190525061020b8360a0013561094f565b8160058151811061021f5761021e611849565b5b60200260200101819052506102558360c00160405160200161024191906118b6565b60405160208183030381529060405261099d565b8160068151811061026957610268611849565b5b6020026020010181905250610282836101c00135610a1b565b8160078151811061029657610295611849565b5b60200260200101819052506102c7836101e00160208101906102b891906118d2565b67ffffffffffffffff16610a1b565b816008815181106102db576102da611849565b5b6020026020010181905250610302836102000160208101906102fd91906118d2565b610a35565b8160098151811061031657610315611849565b5b602002602001018190525061033d8361022001602081019061033891906118d2565b610a35565b81600a8151811061035157610350611849565b5b60200260200101819052506103788361024001602081019061037391906118d2565b610a35565b81600b8151811061038c5761038b611849565b5b60200260200101819052506103f3838061026001906103ab919061190e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061099d565b81600c8151811061040757610406611849565b5b602002602001018190525061042083610280013561094f565b81600d8151811061043457610433611849565b5b602002602001018190525061047a836102a001602081019061045691906118d2565b60405160200161046691906119a7565b60405160208183030381529060405261099d565b81600e8151811061048e5761048d611849565b5b602002602001018190525060006104a482610a59565b90508092505050919050565b60008060606000866101e00151141561051957601167ffffffffffffffff8111156104de576104dd611439565b5b60405190808252806020026020018201604052801561051157816020015b60608152602001906001900390816104fc5790505b50905061056b565b601267ffffffffffffffff81111561053457610533611439565b5b60405190808252806020026020018201604052801561056757816020015b60608152602001906001900390816105525790505b5090505b610578866000015161094f565b8160008151811061058c5761058b611849565b5b60200260200101819052506105a4866020015161094f565b816001815181106105b8576105b7611849565b5b60200260200101819052506105d0866040015161096c565b816002815181106105e4576105e3611849565b5b60200260200101819052506105fc866060015161094f565b816003815181106106105761060f611849565b5b6020026020010181905250610628866080015161094f565b8160048151811061063c5761063b611849565b5b60200260200101819052506106548660a0015161094f565b8160058151811061066857610667611849565b5b602002602001018190525061069f8660c0015160405160200161068b9190611a6d565b60405160208183030381529060405261099d565b816006815181106106b3576106b2611849565b5b60200260200101819052506106cb8660e00151610a1b565b816007815181106106df576106de611849565b5b60200260200101819052506106f8866101000151610a35565b8160088151811061070c5761070b611849565b5b6020026020010181905250610725866101200151610a35565b8160098151811061073957610738611849565b5b6020026020010181905250610752866101400151610a35565b81600a8151811061076657610765611849565b5b602002602001018190525061077f866101600151610a35565b81600b8151811061079357610792611849565b5b60200260200101819052506107ac86610180015161099d565b81600c815181106107c0576107bf611849565b5b60200260200101819052506107d9866101a0015161094f565b81600d815181106107ed576107ec611849565b5b6020026020010181905250610825866101c0015160405160200161081191906119a7565b60405160208183030381529060405261099d565b81600e8151811061083957610838611849565b5b60200260200101819052506000866101e00151146108d35761085f866101e00151610a1b565b81600f8151811061087357610872611849565b5b60200260200101819052506108878561096c565b8160108151811061089b5761089a611849565b5b60200260200101819052506108af8461094f565b816011815181106108c3576108c2611849565b5b6020026020010181905250610924565b6108dc8561096c565b81600f815181106108f0576108ef611849565b5b60200260200101819052506109048461094f565b8160108151811061091857610917611849565b5b60200260200101819052505b600061092f82610a59565b90506109418180519060200120610a9d565b935093505050935093915050565b60606109656109608360001c610ab1565b61099d565b9050919050565b6060610996826040516020016109829190611ad1565b60405160208183030381529060405261099d565b9050919050565b606080600183511480156109d557506080836000815181106109c2576109c1611849565b5b602001015160f81c60f81b60f81c60ff16105b156109e257829050610a12565b6109ee83516080610bbf565b83604051602001610a00929190611b28565b60405160208183030381529060405290505b80915050919050565b6060610a2e610a2983610e07565b61099d565b9050919050565b6060610a52610a4d8367ffffffffffffffff16610e07565b61099d565b9050919050565b60606000610a6683610f8b565b9050610a74815160c0610bbf565b81604051602001610a86929190611b28565b604051602081830303815290604052915050919050565b6000808291508260001c60801b9050915091565b6060600082604051602001610ac69190611b6d565b6040516020818303038152906040529050600080602067ffffffffffffffff811115610af557610af4611439565b5b6040519080825280601f01601f191660200182016040528015610b275781602001600182028036833780820191505090505b50905060005b8151811015610bb357838380610b4290611bb7565b945081518110610b5557610b54611849565b5b602001015160f81c60f81b828281518110610b7357610b72611849565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610bac90611bb7565b9050610b2d565b50809350505050919050565b6060806038841015610c7257600167ffffffffffffffff811115610be657610be5611439565b5b6040519080825280601f01601f191660200182016040528015610c185781602001600182028036833780820191505090505b5090508284610c279190611c0d565b60f81b81600081518110610c3e57610c3d611849565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610dfd565b600080600190505b60008187610c889190611c73565b14610cae5781610c9790611bb7565b915061010081610ca79190611ca4565b9050610c7a565b600182610cbb9190611cfe565b67ffffffffffffffff811115610cd457610cd3611439565b5b6040519080825280601f01601f191660200182016040528015610d065781602001600182028036833780820191505090505b50925060378583610d179190611c0d565b610d219190611c0d565b60f81b83600081518110610d3857610d37611849565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190505b818111610dfa576101008183610d829190611d54565b610100610d8f9190611ebb565b87610d9a9190611c73565b610da49190611f06565b60f81b838281518110610dba57610db9611849565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610df390611bb7565b9050610d6c565b50505b8091505092915050565b6060600082604051602001610e1c9190611b6d565b604051602081830303815290604052905060005b6020811015610e9957600060f81b828281518110610e5157610e50611849565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610e8857610e99565b80610e9290611bb7565b9050610e30565b6000816020610ea89190611d54565b67ffffffffffffffff811115610ec157610ec0611439565b5b6040519080825280601f01601f191660200182016040528015610ef35781602001600182028036833780820191505090505b50905060005b8151811015610f7f57838380610f0e90611bb7565b945081518110610f2157610f20611849565b5b602001015160f81c60f81b828281518110610f3f57610f3e611849565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610f7890611bb7565b9050610ef9565b50809350505050919050565b6060600082511415610fec57600067ffffffffffffffff811115610fb257610fb1611439565b5b6040519080825280601f01601f191660200182016040528015610fe45781602001600182028036833780820191505090505b509050611115565b600080600090505b8351811015611037578381815181106110105761100f611849565b5b602002602001015151826110249190611cfe565b91508061103090611bb7565b9050610ff4565b60008267ffffffffffffffff81111561105357611052611439565b5b6040519080825280601f01601f1916602001820160405280156110855781602001600182028036833780820191505090505b5090506000602082019050600092505b855183101561110d5760008684815181106110b3576110b2611849565b5b6020026020010151905060006020820190506110d18382845161111a565b8785815181106110e4576110e3611849565b5b602002602001015151836110f89190611cfe565b925050508261110690611bb7565b9250611095565b819450505050505b919050565b6000839050600083905060008390505b6020811061116857815183526020836111439190611cfe565b92506020826111529190611cfe565b91506020816111619190611d54565b905061112a565b60006001826020036101000a0390508019835116818551168181178652505050505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b60006102e082840312156111c0576111bf6111a4565b5b81905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111f4826111c9565b9050919050565b611204816111e9565b811461120f57600080fd5b50565b600081359050611221816111fb565b92915050565b6000819050919050565b61123a81611227565b811461124557600080fd5b50565b60008135905061125781611231565b92915050565b6000806000606084860312156112765761127561119a565b5b600084013567ffffffffffffffff8111156112945761129361119f565b5b6112a0868287016111a9565b93505060206112b186828701611212565b92505060406112c286828701611248565b9150509250925092565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b611301816112cc565b82525050565b600060408201905061131c60008301856112f8565b61132960208301846112f8565b9392505050565b6000602082840312156113465761134561119a565b5b600082013567ffffffffffffffff8111156113645761136361119f565b5b611370848285016111a9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113b3578082015181840152602081019050611398565b838111156113c2576000848401525b50505050565b6000601f19601f8301169050919050565b60006113e482611379565b6113ee8185611384565b93506113fe818560208601611395565b611407816113c8565b840191505092915050565b6000602082019050818103600083015261142c81846113d9565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611471826113c8565b810181811067ffffffffffffffff821117156114905761148f611439565b5b80604052505050565b60006114a3611190565b90506114af8282611468565b919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156114d9576114d8611439565b5b602082029050919050565b600080fd5b60006114fc6114f7846114be565b611499565b90508060208402830185811115611516576115156114e4565b5b835b8181101561153f578061152b8882611248565b845260208401935050602081019050611518565b5050509392505050565b600082601f83011261155e5761155d6114b9565b5b600861156b8482856114e9565b91505092915050565b6000819050919050565b61158781611574565b811461159257600080fd5b50565b6000813590506115a48161157e565b92915050565b600067ffffffffffffffff82169050919050565b6115c7816115aa565b81146115d257600080fd5b50565b6000813590506115e4816115be565b92915050565b600080fd5b600067ffffffffffffffff82111561160a57611609611439565b5b611613826113c8565b9050602081019050919050565b82818337600083830152505050565b600061164261163d846115ef565b611499565b90508281526020810184848401111561165e5761165d6115ea565b5b611669848285611620565b509392505050565b600082601f830112611686576116856114b9565b5b813561169684826020860161162f565b91505092915050565b60006102e082840312156116b6576116b5611434565b5b6116c1610200611499565b905060006116d184828501611248565b60008301525060206116e584828501611248565b60208301525060406116f984828501611212565b604083015250606061170d84828501611248565b606083015250608061172184828501611248565b60808301525060a061173584828501611248565b60a08301525060c061174984828501611549565b60c0830152506101c061175e84828501611595565b60e0830152506101e0611773848285016115d5565b61010083015250610200611789848285016115d5565b6101208301525061022061179f848285016115d5565b610140830152506102406117b5848285016115d5565b6101608301525061026082013567ffffffffffffffff8111156117db576117da6114b4565b5b6117e784828501611671565b610180830152506102806117fd84828501611248565b6101a0830152506102a0611813848285016115d5565b6101c0830152506102c061182984828501611595565b6101e08301525092915050565b6000611842368361169f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561188e5761188d61119a565b5b600061189c84828501611212565b91505092915050565b6118b26101008383611620565b5050565b60006118c282846118a5565b6101008201915081905092915050565b6000602082840312156118e8576118e761119a565b5b60006118f6848285016115d5565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261192b5761192a6118ff565b5b80840192508235915067ffffffffffffffff82111561194d5761194c611904565b5b60208301925060018202360383131561196957611968611909565b5b509250929050565b60008160c01b9050919050565b600061198982611971565b9050919050565b6119a161199c826115aa565b61197e565b82525050565b60006119b38284611990565b60088201915081905092915050565b600060089050919050565b600081905092915050565b6000819050919050565b6119eb81611227565b82525050565b60006119fd83836119e2565b60208301905092915050565b6000602082019050919050565b611a1f816119c2565b611a2981846119cd565b9250611a34826119d8565b8060005b83811015611a65578151611a4c87826119f1565b9650611a5783611a09565b925050600181019050611a38565b505050505050565b6000611a798284611a16565b6101008201915081905092915050565b60008160601b9050919050565b6000611aa182611a89565b9050919050565b6000611ab382611a96565b9050919050565b611acb611ac6826111e9565b611aa8565b82525050565b6000611add8284611aba565b60148201915081905092915050565b600081905092915050565b6000611b0282611379565b611b0c8185611aec565b9350611b1c818560208601611395565b80840191505092915050565b6000611b348285611af7565b9150611b408284611af7565b91508190509392505050565b6000819050919050565b611b67611b6282611574565b611b4c565b82525050565b6000611b798284611b56565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bc282611574565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611bf557611bf4611b88565b5b600182019050919050565b600060ff82169050919050565b6000611c1882611c00565b9150611c2383611c00565b92508260ff03821115611c3957611c38611b88565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c7e82611574565b9150611c8983611574565b925082611c9957611c98611c44565b5b828204905092915050565b6000611caf82611574565b9150611cba83611574565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cf357611cf2611b88565b5b828202905092915050565b6000611d0982611574565b9150611d1483611574565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d4957611d48611b88565b5b828201905092915050565b6000611d5f82611574565b9150611d6a83611574565b925082821015611d7d57611d7c611b88565b5b828203905092915050565b60008160011c9050919050565b6000808291508390505b6001851115611ddf57808604811115611dbb57611dba611b88565b5b6001851615611dca5780820291505b8081029050611dd885611d88565b9450611d9f565b94509492505050565b600082611df85760019050611eb4565b81611e065760009050611eb4565b8160018114611e1c5760028114611e2657611e55565b6001915050611eb4565b60ff841115611e3857611e37611b88565b5b8360020a915084821115611e4f57611e4e611b88565b5b50611eb4565b5060208310610133831016604e8410600b8410161715611e8a5782820a905083811115611e8557611e84611b88565b5b611eb4565b611e978484846001611d95565b92509050818404811115611eae57611ead611b88565b5b81810290505b9392505050565b6000611ec682611574565b9150611ed183611574565b9250611efe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611de8565b905092915050565b6000611f1182611574565b9150611f1c83611574565b925082611f2c57611f2b611c44565b5b82820690509291505056fea2646970667358221220b44b0c09ce1f2d391087528695822b073c03a298f141d1c7927c7e2ca045cb2d64736f6c63430008090033";

type TestLibBlockHeaderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLibBlockHeaderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLibBlockHeader__factory extends ContractFactory {
  constructor(...args: TestLibBlockHeaderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestLibBlockHeader> {
    return super.deploy(overrides || {}) as Promise<TestLibBlockHeader>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLibBlockHeader {
    return super.attach(address) as TestLibBlockHeader;
  }
  override connect(signer: Signer): TestLibBlockHeader__factory {
    return super.connect(signer) as TestLibBlockHeader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLibBlockHeaderInterface {
    return new utils.Interface(_abi) as TestLibBlockHeaderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLibBlockHeader {
    return new Contract(address, _abi, signerOrProvider) as TestLibBlockHeader;
  }
}
