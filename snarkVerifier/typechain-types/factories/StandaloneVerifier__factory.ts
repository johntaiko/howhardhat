/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  StandaloneVerifier,
  StandaloneVerifierInterface,
} from "../StandaloneVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "prover",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "zkproof",
        type: "bytes",
      },
    ],
    name: "verifyZKP",
    outputs: [
      {
        internalType: "bool",
        name: "verified",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102c7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bc9a76df14610030575b600080fd5b61004a600480360381019061004591906101a3565b610060565b604051610057919061021e565b60405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff168383604051610089929190610278565b600060405180830381855afa9150503d80600081146100c4576040519150601f19603f3d011682016040523d82523d6000602084013e6100c9565b606091505b5050809150509392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061010b826100e0565b9050919050565b61011b81610100565b811461012657600080fd5b50565b60008135905061013881610112565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126101635761016261013e565b5b8235905067ffffffffffffffff8111156101805761017f610143565b5b60208301915083600182028301111561019c5761019b610148565b5b9250929050565b6000806000604084860312156101bc576101bb6100d6565b5b60006101ca86828701610129565b935050602084013567ffffffffffffffff8111156101eb576101ea6100db565b5b6101f78682870161014d565b92509250509250925092565b60008115159050919050565b61021881610203565b82525050565b6000602082019050610233600083018461020f565b92915050565b600081905092915050565b82818337600083830152505050565b600061025f8385610239565b935061026c838584610244565b82840190509392505050565b6000610285828486610253565b9150819050939250505056fea264697066735822122095207e3dbfef67047cf55d31be14a78bfc292dcfd6789a051118bd6320acfc3d64736f6c63430008090033";

type StandaloneVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StandaloneVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StandaloneVerifier__factory extends ContractFactory {
  constructor(...args: StandaloneVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StandaloneVerifier> {
    return super.deploy(overrides || {}) as Promise<StandaloneVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StandaloneVerifier {
    return super.attach(address) as StandaloneVerifier;
  }
  override connect(signer: Signer): StandaloneVerifier__factory {
    return super.connect(signer) as StandaloneVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandaloneVerifierInterface {
    return new utils.Interface(_abi) as StandaloneVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StandaloneVerifier {
    return new Contract(address, _abi, signerOrProvider) as StandaloneVerifier;
  }
}
