/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SimpleAssembly,
  SimpleAssemblyInterface,
} from "../SimpleAssembly";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "simpleAssemblyCalldataLoad",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "simpleAssemblyConditionalRevert",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "simpleAssemblyReturn",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "simpleAssemblyRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "simpleAssemblyRevertWithReturn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610319806100536000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806325aab80b14610067578063402b32ab146100715780638da5cb5b146100a157806391e4960e146100bf578063ad4cb134146100ef578063b933a6301461010d575b600080fd5b61006f610117565b005b61008b60048036038101906100869190610206565b61011c565b604051610098919061026c565b60405180910390f35b6100a961014f565b6040516100b691906102c8565b60405180910390f35b6100d960048036038101906100d49190610206565b610173565b6040516100e6919061026c565b60405180910390f35b6100f761018b565b604051610104919061026c565b60405180910390f35b610115610192565b005b600080f35b6000610131565b600060448201359050919050565b61013b6000610123565b8061014557600080fd5b8060005260206000f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080358061018157600080fd5b8060005260206000f35b6000806000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126101c6576101c56101a1565b5b8235905067ffffffffffffffff8111156101e3576101e26101a6565b5b6020830191508360018202830111156101ff576101fe6101ab565b5b9250929050565b6000806020838503121561021d5761021c610197565b5b600083013567ffffffffffffffff81111561023b5761023a61019c565b5b610247858286016101b0565b92509250509250929050565b6000819050919050565b61026681610253565b82525050565b6000602082019050610281600083018461025d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102b282610287565b9050919050565b6102c2816102a7565b82525050565b60006020820190506102dd60008301846102b9565b9291505056fea2646970667358221220d2a4e256032c9ffcf0aa37ba843f87f1ae9c91b230526d022c380c0487c8156164736f6c63430008090033";

type SimpleAssemblyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleAssemblyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleAssembly__factory extends ContractFactory {
  constructor(...args: SimpleAssemblyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleAssembly> {
    return super.deploy(overrides || {}) as Promise<SimpleAssembly>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleAssembly {
    return super.attach(address) as SimpleAssembly;
  }
  override connect(signer: Signer): SimpleAssembly__factory {
    return super.connect(signer) as SimpleAssembly__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleAssemblyInterface {
    return new utils.Interface(_abi) as SimpleAssemblyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleAssembly {
    return new Contract(address, _abi, signerOrProvider) as SimpleAssembly;
  }
}
