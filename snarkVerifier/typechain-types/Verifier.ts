/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface VerifierInterface extends utils.Interface {
  functions: {
    "max_calldata()": FunctionFragment;
    "max_txs()": FunctionFragment;
    "owner()": FunctionFragment;
    "verifyMockData(bytes)": FunctionFragment;
    "verifyPoint(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "max_calldata"
      | "max_txs"
      | "owner"
      | "verifyMockData"
      | "verifyPoint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "max_calldata",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "max_txs", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyMockData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPoint",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "max_calldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "max_txs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyMockData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPoint",
    data: BytesLike
  ): Result;

  events: {
    "VerificationSuccess(uint64,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VerificationSuccess"): EventFragment;
}

export interface VerificationSuccessEventObject {
  block_num: BigNumber;
  block_hash: BigNumber;
}
export type VerificationSuccessEvent = TypedEvent<
  [BigNumber, BigNumber],
  VerificationSuccessEventObject
>;

export type VerificationSuccessEventFilter =
  TypedEventFilter<VerificationSuccessEvent>;

export interface Verifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    max_calldata(overrides?: CallOverrides): Promise<[BigNumber]>;

    max_txs(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    verifyMockData(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyPoint(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  max_calldata(overrides?: CallOverrides): Promise<BigNumber>;

  max_txs(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  verifyMockData(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyPoint(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    max_calldata(overrides?: CallOverrides): Promise<BigNumber>;

    max_txs(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    verifyMockData(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyPoint(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "VerificationSuccess(uint64,uint256)"(
      block_num?: null,
      block_hash?: null
    ): VerificationSuccessEventFilter;
    VerificationSuccess(
      block_num?: null,
      block_hash?: null
    ): VerificationSuccessEventFilter;
  };

  estimateGas: {
    max_calldata(overrides?: CallOverrides): Promise<BigNumber>;

    max_txs(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    verifyMockData(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyPoint(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    max_calldata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    max_txs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyMockData(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyPoint(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
